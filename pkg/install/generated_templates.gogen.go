// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x16\x6f\xdd\x82\x1e\xf7\x26\x05\xc1\x83\x5e\x14\xef\xc3\x66\xb6\x1d\xdc\x26\x4b\x32\xdb\x0a\x31\xff\x5d\x36\xa1\xcb\x2a\x9e\x32\xc3\xbc\xf7\x65\x5e\x92\x12\xa4\xc7\xfe\xe0\x5d\x2f\xc7\x27\x19\xf8\xe0\x9d\xb2\x53\x34\x39\x9b\xa6\x69\xcc\x16\xef\x27\x46\xef\x87\xc1\x5f\xc5\x1d\x21\x11\x53\x64\x0b\xf5\x18\x83\xbf\x88\x65\x10\xba\x62\x9f\x02\xa9\x78\x87\xde\x07\xf4\xc3\xf4\x65\xf7\x66\x8b\xe7\x85\xfe\x18\xeb\xf9\x42\xe3\x4c\x89\xac\x33\x44\xc3\xc4\x3b\xe8\x89\xff\x40\x24\xa2\x0b\x4c\xca\xd6\x6c\x41\x11\x84\xc5\xbd\x83\xd7\x13\x87\xab\x44\x86\xe8\x4a\x59\x75\x6f\xdc\x05\xd6\xbd\xa1\x51\x3e\x38\x44\xf1\xae\xc5\xe5\xde\x7c\x8a\xb3\x2d\x7e\xe5\x5d\x6f\x94\xf3\x52\xa7\x04\x1e\x22\x23\xe7\x8a\x9a\x7b\x67\x91\xb3\x39\xb3\x92\x25\xa5\xd6\x00\x8e\xce\xdc\x96\x9c\x4d\xdd\xdc\xe0\x46\x7f\xa5\x33\xc7\x91\x3a\x2e\xaf\x58\xa5\xa5\x2f\xf7\xaf\xc6\x65\x9a\x52\x73\xe3\x57\x76\x4a\x18\x83\x38\xed\xb1\xb9\x8b\x9b\xff\x3e\xe7\x1b\xe2\xec\x5c\x3c\xcc\xae\x15\xe0\x27\x00\x00\xff\xff\x02\xd2\xd6\x67\xcf\x01\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 8437,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\xb1\xa3\xdc\x4c\xec\x19\x91\xb2\xeb\xb6\x77\xc3\x9e\x3b\x97\xe6\xc3\xf5\xa5\x49\x3d\x76\x72\x37\x7d\xaa\x21\x72\x25\x62\x04\x02\x3c\x2c\x28\x55\xe3\xe9\xff\x7e\xb3\x00\x3f\x40\x49\x96\x73\x79\x3b\x3f\xc4\x31\x09\x2c\x76\x7f\xfb\xf5\xc3\x32\x49\x92\x13\x51\xcb\x7f\xa1\x25\x69\x74\x06\xa2\xae\x69\xb6\xbe\x38\x59\x49\x5d\x64\xf0\x06\x6b\x65\xb6\x15\x6a\x77\x52\xa1\x13\x85\x70\x22\x3b\x01\xd0\xa2\xc2\x0c\x16\xaa\xf9\xe3\xf1\x11\xe4\x02\xd2\x8f\xa2\x42\xaa\x45\x8e\xf0\xe7\x9f\xed\x7b\xff\x67\x06\x8f\x8f\xe3\xb7\x8f\x8f\x80\xba\xe0\x65\x54\x63\xce\xc2\x2c\xd6\x4a\xe6\x82\x32\xb8\x38\x01\x20\x54\x98\x3b\x63\xf9\x0d\x40\x25\x5c\x5e\xfe\x22\xe6\xa8\x28\x3c\x88\xcf\xe6\xd5\xce\x0a\x87\xcb\x6d\x78\xe9\xb6\x35\x66\x70\x87\xb9\x45\xe1\xf0\x04\xc0\x61\x55\x2b\xe1\xb0\x15\x16\x59\xc0\x3f\x42\x6b\xe3\x84\x93\x46\xf7\xc2\x01\x6a\x6b\x2a\x74\x25\x36\x94\x4a\x33\xab\x8d\x75\x19\x4c\x2e\xcf\x2f\x2f\x26\xf0\x02\x1c\x2a\x15\xad\x00\x67\x80\x72\x2b\x6a\x84\x59\x85\xce\xca\x9c\xd8\xb8\xda\x48\xed\x5e\x12\xf0\xe6\xb4\x15\xac\x46\x36\xec\x58\x01\xd0\x61\xe1\x5f\x99\x02\xef\x47\x28\xf0\xcf\x1c\x9d\x48\x57\xcd\x1c\xad\x46\x87\x5e\x39\x43\x19\x28\xa9\x5b\x11\x0c\x9d\x5d\xcb\x1c\x5f\xe5\xb9\x69\xb4\xfb\x38\x3e\x01\x60\x6d\x54\x53\x61\xaf\x43\xd2\xea\xb0\x94\x2e\x59\xe1\xb6\x3f\x88\x18\x3e\x37\x1c\xdc\x3d\x19\xe4\x25\xbc\xa5\xf0\x91\x11\xad\x2a\x70\x21\x1a\xe5\x3e\x98\x02\x33\x38\xff\xf6\xfc\x1c\x5e\xc0\xa6\x44\x0d\x15\x6b\x83\x05\x58\x14\x45\x62\xb4\xda\x4e\x61\x83\xb0\x31\xfa\xa5\x83\x39\x82\x98\x2b\x64\x20\xf3\xb2\x32\xc5\x49\x2b\xf0\x05\x7c\x2a\x25\x81\x24\x10\xe0\xaa\x7a\x41\xd0\x10\x16\xb0\x30\x16\x96\xa8\xd1\x0a\x27\xf5\x12\xee\xef\x7f\x86\x15\x6e\x29\x85\x1b\x0d\xef\xff\x46\xf0\xe3\x15\x5c\xa4\x17\xe7\xd3\x5e\x4a\x77\x76\x30\x81\x40\x58\x8c\xf5\x20\xc3\xaa\x68\xc4\x02\x04\x10\xd6\x82\xa3\xa9\x05\x0a\x36\xd8\x8b\xc9\x85\x86\x8d\x95\x8e\x15\x4d\x0f\xe3\xb7\x44\xdd\x83\x81\x55\xed\xb6\x6f\xa4\x8d\x41\xac\xb0\x90\x4d\x95\xc1\x07\xac\x8c\xdd\xc6\x76\x22\x2c\x8c\x52\x66\xc3\x16\xb5\x47\x4b\xf2\xa6\x36\xc4\xcf\x04\xe4\x0d\x39\x53\x49\x46\x60\xa5\xcd\x46\xff\x5e\x1a\x72\xd4\x8b\x58\x48\x85\x53\xd8\x94\x32\x2f\x61\x6b\x1a\xd8\x48\xa5\x82\x51\xce\x40\x61\x38\x41\xf9\x31\x6f\xe2\xff\x58\x30\x1b\xcd\x6a\xf7\x02\x2c\xd6\x06\xac\x70\x25\x5a\x70\xa5\xd0\xed\xc1\x4b\xe9\xca\x66\x0e\x86\x1f\x22\x28\xb9\xc2\x14\x7e\x33\xcd\x4b\xa5\x40\x28\x32\xdd\x11\x63\xb0\x41\x3a\x90\xda\x19\xbf\x27\x37\xda\x09\xa9\xd1\x4e\x61\x8e\xca\x6c\x52\xb8\xc7\x01\xd5\xd2\xb9\x9a\xb2\xd9\xac\x30\x39\xa5\x1c\x58\x79\xc1\x61\x8d\x7a\xc6\x39\x4b\x6e\xb6\x6c\x64\x81\x34\x6b\x08\x93\xda\xca\xb5\x70\xe8\x43\x8f\x0d\x49\x4b\x57\xa9\x5e\x52\xe7\x0b\xa2\x32\xc9\x8d\x5e\xc8\x65\xff\x0a\x20\x3c\xf8\x20\xea\x2c\x7a\x18\x67\x60\x12\x6d\xfb\x5a\xbf\xf8\xd4\x9c\x05\x21\x43\xf8\x3d\xeb\x93\x8d\xa4\x92\x9f\x94\x62\x8d\x20\xa0\x90\x8b\x05\x5a\xae\xb6\x9d\x84\x36\xab\x86\x8a\xea\x5d\x10\xc4\xc5\x4e\xe0\xaa\xb4\x96\x05\x76\xb0\x2f\xe4\xb2\x12\xf5\xa0\x88\x74\x25\x08\x0d\xa8\x9d\xdd\x7a\x1b\x1e\xc2\xa2\x87\x29\x08\x5d\x40\xa3\x73\x53\x71\x99\xf7\xfb\x83\xb5\x1f\xbc\x3b\x85\x2e\x7a\x29\xa8\xd7\x5e\x82\x44\x6a\xfd\xb9\xe7\x01\x86\xe1\x2b\x3c\x10\x6d\x7b\xd6\x03\xbe\x12\x38\x03\xb2\xe2\x02\x0b\xd7\xb7\xd7\xbe\x08\xc0\x29\x9b\x45\x72\xa9\xa5\x1e\x0e\x67\xe3\xd6\x68\xe5\x42\xe6\xbe\xd2\x43\xdd\xd8\xda\x10\xd2\xd9\x17\x00\xd9\x4b\x09\xe5\x23\xa0\xc8\x00\xf1\x79\x5f\x00\x1c\x08\xbb\x1c\xd2\xf4\x09\xc4\x96\xf5\x92\xeb\x07\x45\xd0\x8c\x4b\xf0\x8b\x27\x8a\xf0\xfe\xbe\x03\x45\xb8\x83\xf3\xf1\x31\xf1\x8d\xfa\xb5\x07\xf9\x9d\x54\xf8\xda\x68\xc7\x7a\xfb\x86\xfd\x65\x88\x77\xd0\x88\xd6\xa3\x8d\x0d\x98\x32\xf0\xac\x53\x31\x92\x34\xec\x0f\xfd\xb8\x60\x05\x18\xa5\xa4\x4d\xb6\x84\x0b\x17\x30\x7e\x8c\x95\x92\x7a\x00\xdc\xd4\x5e\xb0\xa4\xee\xcc\x22\x85\x9b\x5e\xfd\x57\xf4\xba\x8b\x28\x5e\x42\xe8\x58\x3b\x67\x1b\x9c\x8e\xdc\x36\xd6\x92\x9b\x09\x51\x53\x05\x5b\xb8\xf3\x40\x2f\x66\x0a\x86\xab\xdf\x46\x12\xfa\x02\xd6\x2f\xed\x65\x75\x5b\xee\xbd\x1f\xd2\x83\xb0\xc6\x7a\xf5\xb0\x26\x71\x9c\xb7\x86\x07\x68\xfa\xee\xb0\x97\x1f\x3b\xd9\x31\x4a\x28\x3e\x92\x19\x54\xd2\x9f\xd0\x2a\x71\xaa\x8d\x3b\xa0\xc9\xd9\xff\xa4\xca\x17\x74\xff\x2f\xd0\xa6\x65\x78\x27\xbd\x79\xa1\x0b\xec\x71\x8f\x88\x9d\xb4\x51\x63\xd1\xf7\x68\x6d\x60\x92\x85\x2e\x30\x01\x59\x89\x25\x52\x1f\x65\x29\xbc\x93\xba\xf0\x91\x54\x71\x4b\xb3\x98\x0f\x15\x33\xb4\x33\x85\x82\x90\x1b\x97\xdf\xca\x05\x80\xc9\x2d\x08\xd7\xf7\x9c\xb2\x99\xa7\x85\xc9\x57\x68\xd3\xdc\x54\x33\x3b\x0b\xfd\xc7\xff\x9a\x39\xd1\xa7\x6d\x57\x43\x98\xa4\x32\x81\xe5\x53\x9d\x58\x02\x6b\x9a\xf6\x6b\xfc\x31\x19\xb4\x02\xa5\x89\xa5\x65\x17\xe9\xc5\x5f\xd3\x8b\xf1\xda\xdb\x46\xa9\x5b\xa3\x64\xbe\xcd\xe0\x66\xf1\xd1\xb8\x5b\x8b\x14\x5b\x61\x91\x4c\x63\x73\xa4\xd8\x15\x16\xff\xd3\x20\xb9\xd1\x33\x80\xbc\x6e\x32\xf8\xee\xbc\x1a\x3d\xac\x3c\xcd\xc8\xe0\xfb\x6f\x3f\xc8\x81\xdb\x1a\x1b\x6f\x4e\x06\xcf\xdc\x7a\x9e\x7b\x79\x7e\xc9\xac\x4d\xea\x85\xb1\x95\x4f\x1a\xa1\xfa\xd5\x4a\xae\x51\x23\xd1\xad\x35\x73\x8c\x35\x60\x48\xaf\xc7\x31\x13\x8e\x0a\x02\xc7\x8f\x85\x2b\x33\x98\x89\x5a\x06\xa4\xd7\xdf\xcf\x64\x81\xda\x49\xb7\x4d\xeb\x66\x1e\xad\x95\x5a\x3a\x29\xd4\x1b\x54\x62\x7b\xcf\xbd\xa1\xa0\x0c\xbe\x8b\x16\x38\x59\xa1\x69\xdc\x81\x77\x4c\xf0\xe4\xff\x87\xaa\x51\xc3\x18\x39\xe6\x30\x35\x87\x40\xb1\x6e\x83\x66\xe8\x72\xaf\x59\x31\x23\x2a\x43\x85\xf2\xd7\x25\x50\xa6\xed\x75\x4b\x76\x19\x48\x1d\x62\xee\x25\x85\x3d\x44\xe5\x6c\x94\xc3\x1d\x66\xbf\x6a\xb5\xcd\x7c\x19\x65\x69\xcc\xbf\x7d\x77\x9c\xb7\xa4\x82\x53\xaa\x46\xbb\x30\x36\x47\x16\x1a\x08\x37\xf3\xed\xa7\x14\x8f\x39\xf1\x58\xf7\xb5\xb0\xad\xee\x61\xd9\xd7\xa9\x1f\xe5\xe8\x8d\xce\x55\xe3\xbb\x36\x5f\x1b\x02\xb9\xea\x3a\x7a\xe0\xa5\xcf\xd0\xe8\x8e\x48\xff\xc0\x5b\x77\x28\xee\xd0\xcc\x0a\xcc\x95\xb0\x7c\x5d\x98\x9b\x75\x54\x00\x8e\x50\xd0\xd0\x9a\x63\xe3\xad\x31\x6e\x96\x12\x95\x4f\x1a\x20\xf4\xe8\xd4\xc9\x40\x8f\x26\xe1\xe4\x69\xb7\x24\x92\x80\x7a\x2d\xad\xd1\x9e\x8c\x04\x9e\x37\x79\xff\xf9\xa7\xb7\xaf\x7f\xfd\xf8\xee\xe6\x7a\x12\xe8\xc7\x94\xf1\x30\x6b\xb4\x76\xcc\x15\x23\x31\xbe\xd9\xcf\xb7\x81\xc9\x39\x75\xc8\xc6\x3d\x92\xb7\x6f\xe3\x10\x9c\xbc\xf8\x49\x43\x99\x54\xf0\x6d\xb9\x3b\x8d\x4b\x74\x44\x83\x5b\xed\xbc\x4f\x22\x11\xbb\x64\x3a\x76\xba\x67\xd2\xdd\xb5\x4f\x68\x10\xca\xa1\xd5\x7c\xad\xdb\xd3\x78\x61\x4d\xd5\x73\x99\x8a\x49\x80\x20\x0e\xb7\x96\xd1\x31\x0c\xca\xe4\x2b\xda\x77\x36\xea\x75\x76\x00\x97\x01\xee\x11\x2e\x6b\xa1\x1a\xdc\xc3\xe4\xb9\x20\xde\x8d\x81\x8e\xef\x1d\x89\x00\xa6\x9b\x63\x9a\x79\x84\x68\x3e\x11\x97\xbc\x2a\x30\xeb\xd1\xba\x71\x7d\x18\x94\x6e\xe7\x3f\xfb\xb4\x72\x20\x04\xfd\xd5\x90\xa2\x80\xeb\xcc\x0a\x3e\x60\x83\x0e\xdc\x1a\xf7\xea\xca\x11\xe2\xf2\x44\xf8\x45\x8a\xee\xd2\x92\xa7\xca\xc6\x46\x68\xcf\x27\xa9\xa9\x6b\xb5\x85\x9f\x3f\x7d\xba\x85\xb9\x20\x99\x83\x68\x5c\xc9\x64\xd6\xb7\x01\xa1\x02\x25\x19\x2e\xd2\x2c\x70\x2d\x85\xb7\xe1\xe1\xfa\xe6\xd3\xef\xaf\x3e\x7f\xfa\xf9\xf3\xfd\xdb\xbb\x07\xef\xab\xfe\xd1\xfb\xb7\xbf\x3d\x8c\xb2\x75\x2d\xac\x14\x73\x85\xd4\xdd\x2c\x23\x81\x34\xe2\x9b\x6d\xf0\xbd\xb3\xa6\x1a\x07\x60\x58\x76\x87\x8b\x6c\xe4\xb6\x11\x8d\xe4\xaa\xcc\x26\x0c\x00\x70\xc0\x64\x23\x3c\x02\x04\x61\xb8\x83\x05\xd3\x88\x5c\xe4\x25\x73\x77\x3d\x4a\xcc\xfe\x3e\xca\x48\xb1\xf4\x69\x24\xc5\xd8\xf6\xc2\x19\x6d\x68\x87\x53\x7e\xe3\xd4\x1f\x92\x0b\xdd\x61\xec\x4a\xa4\x38\x90\x87\x4b\x88\xdb\x18\xd6\xb2\x61\x9c\x7c\xb9\xf0\x23\x38\xef\x5a\x28\xcd\xc6\x0f\x8e\x8c\xd6\x98\x7b\x97\x49\x37\x0e\xfc\x24\xe9\x0d\xf0\x53\x03\x3e\xfc\xaa\x7f\x94\xb6\xb7\xa5\x94\xd6\x79\x9a\xab\x86\x1c\xda\x94\xbb\x8f\x8a\x21\xf9\x4c\xa1\x50\x0e\x50\xbc\x0e\x4b\x6f\x6e\x47\x46\x71\xcd\x24\x74\x7e\x30\x35\x4e\xcb\x41\x87\x6e\x3d\x47\x97\xb3\xbc\xd2\x8f\x8a\xa2\x38\x8f\x35\x6e\x57\x5f\x9d\x8c\x28\xb2\x24\xa8\x1a\xf2\xa3\x33\x8f\x9e\xc4\x22\xd4\x82\xb9\xef\xca\x9e\xa0\xfa\x89\xd9\x69\x37\x86\x3a\xdb\x4d\xc4\xae\x7f\x4d\x7d\x00\x47\x83\xb3\x91\x22\xdc\xc9\x42\x77\x4e\x0a\x69\xaf\xf6\x7a\x76\xac\xd6\x5d\x44\x8f\x07\xe7\x7d\xbe\xfb\x25\x4c\xf6\x84\x5e\x86\x77\xd7\xd2\xf9\x69\x13\x49\x67\xec\xb6\xef\x35\xef\x98\xd6\x47\xe2\x8e\xe5\x1c\x87\x4d\x64\x7b\x9b\x32\x07\xd3\x29\xce\x85\x8e\xf8\xff\xe5\x34\xce\xcc\xb3\x6c\xf8\xfb\xfd\xdb\xdf\xce\xfe\x11\x66\x5e\xfe\x4e\xd0\x10\xda\xd9\xa0\x6c\x1a\x27\x7a\x77\xef\xbb\x96\x8e\x8d\x8c\x6a\x1d\x23\xc7\x89\xd6\x58\x75\xf5\xf8\x78\x68\x85\xaf\x44\x8a\x10\x46\x15\x32\xde\xb7\x94\x2e\x52\x24\x8b\x2e\x13\xc9\x12\x5d\x42\x4e\x58\x87\x07\x4b\xdb\xae\x16\x73\x2b\x74\x5e\x76\x8a\xfc\xe4\xff\xda\xd5\xa5\xb5\x83\x2b\x27\x1d\x92\xc1\x44\x98\x25\xdc\xfb\x88\xa5\x7f\x1a\xa9\xa3\x0d\x93\xe9\xe4\x79\xe3\x8e\x95\x59\x8b\x9c\x0a\x79\x18\xa0\x54\x42\xcb\x05\x5f\x71\x38\xab\x49\x16\x68\x43\x80\xec\x5c\x14\x7d\xa3\x30\x84\xd0\xe8\x02\xed\x4e\xd4\x59\x54\xc2\xc9\x35\x7a\x06\x4f\x5d\x4e\x2c\x47\x91\x77\x00\x78\x6f\x26\x35\xf3\x42\xda\x8b\x69\xf8\xfd\xcd\x31\x88\x23\xe8\xfc\x07\x8a\x43\xd0\xf9\xa9\x7f\x87\xfe\xde\xaa\xe3\x42\x3f\x13\xda\x83\x81\x45\x68\xfb\xc8\xda\x59\x73\x5c\xe2\xdb\x4a\xc8\x83\x6a\x22\xbf\xe8\x64\xee\xad\x7a\xae\x73\x22\x17\xc8\x8d\x61\xa7\xa0\xf6\xd3\x7c\xc6\x9a\x49\x94\x74\x3b\xf3\xb8\x18\xef\x96\x8e\xb4\x64\xe3\xea\x08\xfb\xe8\x76\xb4\xb2\x78\xd7\xd5\xdf\x57\xb8\x05\x59\xfc\x78\x8c\x59\x46\xda\xf0\x56\xe1\x1a\x8b\xa3\x61\xe0\x81\x33\xfc\xeb\x6d\xd2\xaf\xa7\x51\xf1\xed\x7a\x0f\x48\x07\xa5\x20\xcf\x8a\x8c\x56\x5b\x10\x79\x8e\x14\xfa\x53\x89\x61\x9e\x7e\xda\x8d\x6e\x1f\x16\x42\x11\x3e\x9c\x9d\x44\xae\xb8\x6b\xe9\xd4\x21\x6f\x74\x42\x4f\x8e\x17\x8a\xf1\xb2\x03\xfe\x21\x67\x9b\xdc\x05\x7d\x37\x7e\xb2\xc2\x6c\xbb\x71\x40\x5b\x9d\xc3\xdc\x98\xd5\x0a\xb1\xe6\x8c\xe9\x55\x9d\x2c\xa5\x9b\x4c\xa1\x42\xc1\x40\x73\x79\x06\xe1\xc7\x1d\x6d\x12\x35\x35\x39\x8b\xa2\xea\xb3\xe9\x6c\x47\x31\x16\xcd\xf5\xc9\x21\x17\xb1\xa7\xe3\x45\xe3\x1f\xae\x0b\x9a\xa8\x7f\x0b\x0d\x93\xee\x8c\x49\xd7\x5d\x23\x21\xa7\x98\x2e\xd3\x29\xfc\x1b\x99\xe4\xbf\x56\xa6\x29\xce\x52\x3f\x6b\x74\x66\x85\x61\x5c\x28\xac\x93\x79\xa3\x84\xed\x9c\xd1\x4a\xd9\x25\x06\xed\xa9\x57\x1b\xe2\xae\x90\xb3\xac\x74\xc3\x72\xd3\x8d\xb1\x2b\xea\xef\xfd\x3b\xdb\xfc\x41\x57\x62\x9e\x5f\x7c\x73\xb9\xff\x6f\x6c\xf0\xdb\x10\x7d\x5d\x45\xeb\xbf\x5b\x19\x7d\x24\x34\x3e\xb4\xab\xaf\x87\xc5\x3b\x11\xd2\xc9\x4b\x06\x79\x57\x9e\x92\x3f\x1d\x2d\x87\xb6\xf8\x83\x9f\x08\x9d\x7b\xb4\xeb\x03\x5f\x34\xf9\x6e\x36\xf0\x39\xce\xd1\x1f\x62\x62\x21\x56\xdc\x94\x43\x94\x11\xba\xe8\x33\xe9\xcb\xe8\x4b\x6b\xf4\xc9\x94\x9d\xe3\x27\xf8\xfe\x7e\x94\x8e\xac\x54\x92\x1c\xea\xa4\x55\xe1\x2a\xbb\x3c\xbf\xbc\x88\x0e\x7b\x23\xc9\x83\x4b\xb9\xd0\x3e\x52\xcd\x02\x2c\x2e\x25\x85\x6f\x13\xa7\xdd\xdd\x29\x8c\xff\x0a\xe1\xc4\x5c\x10\x0e\x30\xdf\x85\xb5\xdb\x56\xce\x7d\x27\x66\x07\xeb\x56\xe4\x36\x29\xc2\xba\xa4\x3b\xef\x29\xb0\x9f\xdb\x11\xa0\x6e\xef\x4c\xaf\x8a\x42\x86\x19\x1b\xd3\x9f\x57\x7c\x77\x1b\x49\x1b\xde\x0f\x0c\x78\x54\x94\xad\xa7\x55\xcf\xc8\x49\xfc\x17\xf8\x27\xea\xf9\xf0\x31\xbe\x3b\xf4\xd7\xba\x3d\xf2\xcd\xc7\xfb\x8e\xce\xd2\xb4\x9f\xa4\xb7\xe4\x16\x74\x61\x1c\x75\x53\xfa\x4a\x6c\xfd\xbc\x52\xad\x87\xd1\xbb\x26\x65\xcc\xaa\xa9\x41\x12\x35\x48\x60\x34\x90\xa9\x10\xde\xf7\x5f\xb0\x59\x7a\x53\xd3\xf0\x41\xa4\xd0\xd4\x8d\x44\x27\x1f\x8d\xc6\x49\xfc\x26\x5c\x30\xe3\x4f\x22\xe1\x70\x1a\x7f\x25\xe9\x2e\x8a\x5e\xbf\xd1\x9b\xfe\x1a\x3e\xb9\x98\x9c\xfc\x37\x00\x00\xff\xff\x4e\x17\x36\xb5\xf5\x20\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 967,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x4d\x6f\x9b\x40\x10\xbd\xf3\x2b\x9e\xe4\x6b\x21\x25\x52\x2e\xdc\xa2\xa6\xad\x22\xb5\x91\xa5\x28\xbd\x8f\x97\x81\xac\xb2\x5f\xdd\x9d\x75\x4d\x51\xfe\x7b\x05\x76\x6c\x68\x32\x27\xe0\xbd\x79\xf3\x76\xf6\x51\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x33\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\xab\x7d\x5d\xbc\x68\xd7\x36\xb8\x3b\xcb\x16\x6f\xf4\xa6\x00\x1c\x59\x6e\x2e\xd3\xc7\x11\xba\x43\xf5\x40\x96\x53\x20\xc5\x78\x7d\x3d\x91\xe6\xd7\x06\xe3\xb8\x46\xc7\x11\xec\xda\x89\x96\x02\xab\x49\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\x1f\xb4\x63\x93\x8e\x1f\xde\x19\x28\x00\x61\x1b\x0c\x09\x9f\x5a\x16\x66\xa7\x32\xab\xee\x8f\xfa\x81\x37\x2b\x33\xee\x5b\x7e\x5c\x99\x98\x6a\xc7\x42\xd5\x4b\xde\x71\x74\x2c\x9c\x2a\xed\xaf\x7c\x6a\x60\xb4\xcb\x87\x13\xe9\xbc\xe4\xf3\xb0\xf2\xc3\x61\x53\xcd\xd7\xb0\x00\x9a\xba\xba\xa9\xae\x3f\xaf\xf1\x6d\x36\x66\xeb\x8d\x56\x43\x83\xfb\xee\xc1\xcb\x36\x72\x9a\xee\xe3\x8d\x45\xb1\x5f\x1c\xac\x44\x69\x71\x53\x5f\x03\xd8\xe0\x27\x1d\xb4\xcd\x76\x9a\xe0\xe3\x30\x65\x21\x27\xfe\x04\xed\x60\xb9\xa7\xdd\x20\x9c\x96\x8d\xf7\xb8\xb1\x58\x35\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5d\xd7\xd8\xe0\x8e\x3b\xca\x46\x10\x7c\xbc\xf8\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\x73\x3a\xc5\xa3\x67\x81\xf1\x7d\x82\xef\xc0\xa4\x9e\x11\xf9\x77\xe6\x24\x20\xd7\x22\x72\x0a\xde\x25\xae\xce\x42\x93\xea\xea\x84\xc7\x7d\x2a\xa3\xd9\xc9\xe5\x00\x8b\xdd\x6f\x7d\x94\xe6\xe8\xee\x14\xcd\xdb\xb6\x7d\x64\x95\xa3\x96\xe1\x8b\x77\xc2\x07\x99\x23\x7a\xac\xb4\x46\x9a\x85\x64\xcc\xee\x36\x3d\x25\x8e\x27\xb9\xff\xa1\xef\xd1\xe7\xf0\x1e\x23\x63\xfc\x9f\x6d\xd4\x7b\x6d\xb8\xe7\xaf\x49\x91\x21\x99\x7f\xaf\x8e\x4c\xe2\x4b\xfc\xff\x05\x00\x00\xff\xff\xec\xf7\xcf\x04\xc7\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
